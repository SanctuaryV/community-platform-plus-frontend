
pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/SanctuaryV/community-platform-plus-frontend.git', description: 'Git repo URL')
        string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'IMAGE_NAME_FRONTEND', defaultValue: 'community-platform-plus-frontend', description: 'docker image name')
        booleanParam(name: 'Run_Checkmarx', defaultValue: false, description: 'Run Checkmarx scan')
    }

    environment {
        APP_REPO_URL    = "${params.REPO_URL}"
        APP_REPO_BRANCH = "${params.REPO_BRANCH}"
        IMAGE_NAME_FRONTEND = "${params.IMAGE_NAME_FRONTEND}"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: "${APP_REPO_BRANCH}",
                    url: "${APP_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                  echo "Installing depaendencies..."
                  npm install
                '''
            }
        }

        stage('Build Frontend') {
            steps {
                sh '''
                  echo "Building frontend..."
                  npm run build
                '''
            }
        }

        stage('SAST - Checkmarx') {
            when {
                expression { return params.Run_Checkmarx == true }
            }
            steps {
                checkmarxASTScanner additionalOptions: '--project-groups intern --scan-types "sast,sca"',
                    baseAuthUrl: '',
                    branchName: "${APP_REPO_BRANCH}",
                    checkmarxInstallation: 'Checkmarx',
                    credentialsId: '',
                    projectName: "SanctuaryV/community-platform-plus-frontend",
                    serverUrl: '',
                    tenantName: '',
                    useOwnAdditionalOptions: true
            }
        }

            stage('Build Docker Image') {
            steps {
               {
                    sh '''
                        echo "Building frontend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_FRONTEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_FRONTEND
                    '''
                }
            }
        }
    }
}


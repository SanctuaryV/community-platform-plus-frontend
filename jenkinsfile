
pipeline {
       agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/SanctuaryV/community-platform-plus-frontend.git', description: 'Git repo URL')
        string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'IMAGE_NAME_FRONTEND', defaultValue: 'community-platform-plus-frontend', description: 'docker image name')
        string(name: 'N8N_WEBHOOK_URL', defaultValue: 'https://35.247.160.122:5678/webhook/627982e1-ee55-4a89-a91a-901e8436b313', description: 'n8n Production Webhook URL')
        booleanParam(name: 'Run_Checkmarx', defaultValue: false, description: 'Run Checkmarx scan')
        booleanParam(name: 'PushToGar', defaultValue: false, description: 'Push to Google Artifact Registry')
    }

    environment {
        APP_REPO_URL    = "${params.REPO_URL}"
        APP_REPO_BRANCH = "${params.REPO_BRANCH}"
        IMAGE_NAME_FRONTEND = "${params.IMAGE_NAME_FRONTEND}"
        IMAGE_TAG = "${BUILD_NUMBER}"

        DOCKER_REG_URL      = "${params.DOCKER_REG_URL}"     // e.g. asia-southeast1-docker.pkg.dev
        DOCKER_REG_NAME     = "${params.DOCKER_REG_NAME}"    // e.g. tdg-sec-non-prod-bnxe
        REG_REPO            = "${params.REG_REPO}"           // e.g. docker-images
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                git branch: "${APP_REPO_BRANCH}",
                    url: "${APP_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                  echo "Installing depaendencies..."
                  npm install
                '''
            }
        }

        stage('SAST - Checkmarx') {
            when {
                expression { return params.Run_Checkmarx == true }
            }
            steps {
                checkmarxASTScanner additionalOptions: '--project-groups intern --scan-types "sast,sca"',
                    baseAuthUrl: '',
                    branchName: "${APP_REPO_BRANCH}",
                    checkmarxInstallation: 'Checkmarx',
                    credentialsId: '',
                    projectName: "SanctuaryV/community-platform-plus-frontend",
                    serverUrl: '',
                    tenantName: '',
                    useOwnAdditionalOptions: true
            }
        }

        stage('Build Docker Image') {
            steps {
               
                    sh '''
                        echo "Building frontend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_FRONTEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_FRONTEND
                    '''
                
            }
        }

                stage('Push Image to GAR') {
            when {
                expression { return params.PushToGar == true }
            }
            steps {
                withCredentials([file(credentialsId: 'GCP-GAR', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                        echo "Authenticating with GCP..."
                        gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
                        gcloud auth configure-docker $DOCKER_REG_URL

                        echo "Tagging and pushing frontend image to GAR..."
                        docker tag $IMAGE_NAME_FRONTEND:$IMAGE_TAG $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_FRONTEND:$IMAGE_TAG
                        docker push $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_FRONTEND:$IMAGE_TAG
                    '''
                }
            }
        }

            stage('Clean up Docker Images Locally') {
            steps {
                sh '''
                    echo "Cleaning up Docker images..."
                    docker rmi $IMAGE_NAME_FRONTEND:$IMAGE_TAG || true
                    docker rmi $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_FRONTEND:$IMAGE_TAG || true
                    docker image prune -f
                '''
            }
     }
    }

    post {
        always {
            script {
                def jobResult = currentBuild.result ?: 'SUCCESS'
                def failedStage = 'None'
                
                if (jobResult != 'SUCCESS') {
                    failedStage = env.STAGE_NAME ?: 'Unknown Stage'
                }

                def bangkokTimeZone = TimeZone.getTimeZone('Asia/Bangkok')
                def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                dateFormat.setTimeZone(bangkokTimeZone)
                
                def payload = [
                    jobName: env.JOB_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    jobResult: jobResult,
                    isSuccess: jobResult == 'SUCCESS',
                    triggeredBy: currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')?.get(0)?.userId ?: 'System',
                    startTime: dateFormat.format(new Date(currentBuild.startTimeInMillis)),
                    endTime: dateFormat.format(new Date()),
                    duration: currentBuild.durationString,
                    failedStage: failedStage,
                    timezone: 'Asia/Bangkok',
                    repository: [
                        url: params.REPO_URL,
                        branch: params.REPO_BRANCH
                    ],
                    buildUrl: env.BUILD_URL,
                    parameters: [
                        imageName: params.IMAGE_NAME_FRONTEND,
                        runCheckmarx: params.Run_Checkmarx,
                        pushToGar: params.PushToGar
                    ]
                ]

                try {
                    httpRequest(
                        httpMode: 'POST',
                        url: params.N8N_WEBHOOK_URL,
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(payload),
                        timeout: 30,
                        ignoreSslErrors: true,
                        acceptType: 'APPLICATION_JSON',
                        validResponseCodes: '200:299',
                        quiet: false
                    )
                    echo "✅ Frontend webhook sent to n8n (self-signed SSL) successfully"
                } catch (Exception e) {
                    echo "❌ Failed to send frontend webhook to n8n: ${e.getMessage()}"
                    if (e.getMessage().contains('SSL') || e.getMessage().contains('certificate')) {
                        echo "Note: This appears to be an SSL certificate issue with self-signed certificates"
                    }
                }
            }
        }
    }
}